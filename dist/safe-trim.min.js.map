{"version":3,"sources":["safe-trim.js"],"names":["global","factory","exports","module","define","amd","safeTrim","this","string","ALL_SPACE","SP","leftReg","RegExp","rightReg","zeroReg","otherReg","replace","trim"],"mappings":";;;;;CAKC,SAAUA,EAAQC,GACC,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,IAC9D,kBAAXG,SAAyBA,OAAOC,IAAMD,OAAOH,GACnDD,EAAOM,SAAWL,KAClBM,KAAM,WAAe,YAEvB,SAASD,GAASE,GAChB,GAUIC,GAAYC,wKAEZC,EAAU,GAAIC,QAAO,KAAOH,EAAY,MACxCI,EAAW,GAAID,QAAO,IAAMH,EAAY,OACxCK,EAAU,GAAIF,QAAO,4DAA+B,KACpDG,EAAW,GAAIH,QAAO,0GAA0B,IAEpD,QAAQJ,EAAS,IAAIQ,QAAQL,EAAS,IACrCK,QAAQH,EAAU,IAClBG,QAAQ,GAAIJ,QAlBH,KAkBe,KAAM,IAC9BI,QAAQ,GAAIJ,QAhBD,OAgBe,KAjBlB,MAkBRI,QAAQ,GAAIJ,QAnBJ,KAmBe,KAlBf,MAmBRI,QAAQF,EAAS,IACjBE,QAAQD,EAAU,IAClBE,OAGH,MAAOX","file":"safe-trim.min.js","sourcesContent":["/*!\n * safe-trim v1.0.12\n * (c) 2017 Jerry\n * Released under the MIT License.\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.safeTrim = factory());\n}(this, (function () { 'use strict';\n\nfunction safeTrim(string) {\n  var SP = ' '; // common space\n  var TAB = '\\t'; // tab\n  var CR = '\\r'; //  Carriage Return, Used as a new line character in Mac OS before X\n  var LF = '\\n'; //  Line Feed, Used as a new line character in Unix/Mac OS X\n  var CR_LF = '\\r\\n'; // Used as a new line character in Windows\n  var ZERO_WIDTH_SPACE = '\\v' + // \\x0B VT 垂直制表符\n  '\\f' + //  \\x0C FF 换页符\n  '\\u200B\\u200C\\u200D\\u200E\\u200F\\x0B\\u2028\\u2029\\uFEFF';\n  var OTHER_SPACE = '\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000';\n\n  var ALL_SPACE = SP + TAB + CR + LF + CR_LF + ZERO_WIDTH_SPACE + OTHER_SPACE;\n\n  var leftReg = new RegExp('^[' + ALL_SPACE + ']+');\n  var rightReg = new RegExp('[' + ALL_SPACE + ']+$');\n  var zeroReg = new RegExp('[' + ZERO_WIDTH_SPACE + ']+', 'g');\n  var otherReg = new RegExp('[' + OTHER_SPACE + ']+', 'g');\n\n  return (string + '').replace(leftReg, '') // trim left\n  .replace(rightReg, '') // trim right\n  .replace(new RegExp(TAB, 'g'), '') // TAB => ''\n  .replace(new RegExp(CR_LF, 'g'), LF) // '\\r\\n' => '\\n'\n  .replace(new RegExp(CR, 'g'), LF) // single \\r => '\\n'\n  .replace(zeroReg, '') // Zero-width-space => ''\n  .replace(otherReg, '') // other => ''\n  .trim(); // safety\n}\n\nreturn safeTrim;\n\n})));\n"]}